plugins {
	id("fabric-loom") version "1.8-SNAPSHOT"
	id("com.modrinth.minotaur") version "2.+"
}

archivesBaseName = property("mod.name")
version = "${property("mod.version")}" + "+" + "${property("mod.version_name")}"
group = property("mod.maven_group")

base {
	archivesName = archivesBaseName
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
	minecraft "com.mojang:minecraft:${property('deps.minecraft')}"
	mappings "net.fabricmc:yarn:${property('deps.yarn_mappings')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.fabric_loader')}"

	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${property('deps.cloth_config_version')}")
	modImplementation("com.terraformersmc:modmenu:${property('deps.mod_menu_version')}")

	implementation "org.lwjgl:lwjgl-glfw:3.3.2"
}

loom {
	runConfigs.all {
		ideConfigGenerated true // Run configurations are not created for subprojects by default
		runDir "../../run" // Use a shared run folder and just create separate worlds
	}
}

def target = ">=${property("mod.min_target")}- <=${property("mod.max_target")}"

processResources {
	def expandProps = [
			'version': project.version,
			"minecraftVersion": target,
			"javaVersion": project.property("deps.java")
	]

	filesMatching('fabric.mod.json') {
		expand expandProps
	}

	inputs.properties(expandProps)
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.getRelease().set(project.property("deps.java") as Integer)
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	def java = property("deps.java") == "9" ? JavaVersion.VERSION_1_9 : JavaVersion.VERSION_17

	sourceCompatibility = java
	targetCompatibility = java
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

def collectJars = tasks.register("collectJars", Copy) { copy ->

	def task = tasks.named("remapJar")

	dependsOn(task)

	copy.from task
	copy.into rootProject.buildDir.path + "/libs"
}

// Set up assemble to depend on the collectJars task, so it gets run on build.
assemble {
	dependsOn(collectJars)
}

if (stonecutter.current.isActive) {
	loom {
		runConfigs.client {
			ideConfigGenerated = true
			vmArgs "-Dmixin.debug.export=true"
			runDir "../../run"
		}
	}

	rootProject.tasks.register("buildActive") {
		setGroup "project"

		dependsOn tasks.named("build")
	}
}


modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "wayfix"
	versionNumber = project.version
	versionName = "v" + property("mod.version") + " [" + property("mod.version_name")  + "]"
	versionType = "release"
	uploadFile = remapJar
	gameVersions.addAll(property("publishing.supported_versions").split(","))
	loaders = ["fabric", "quilt"]
	//featured = true

	dependencies {
		required.project "cloth-config"
		optional.project "modmenu"
	}


	def changes = rootProject.file("CHANGES.md").text
	changelog = (property("deps.java") == "9" ? "# Requires Java 9+\n\n" : "") + changes + ""


	System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
	System.out.println("feature the version " + project.version)
	System.out.println("also unfeature the last version whilst you're at it")
	System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
}